#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

struct Process {
    string pid;
    int burstTime;
    int arrivalTime;
    int completionTime;
    int turnaroundTime;
    int waitingTime;
    int remainingTime;

    Process(string p, int b, int a) : pid(p), burstTime(b), arrivalTime(a), remainingTime(b), completionTime(0), turnaroundTime(0), waitingTime(0) {}
};

bool compareByArrival(const Process &a, const Process &b) {
    return a.arrivalTime < b.arrivalTime;
}

int main() {
    int n = 5; // number of processes
    vector<Process> proc;

    // Initialize the processes with the provided input
    proc.push_back(Process("p1", 1, 3));
    proc.push_back(Process("p2", 4, 1));
    proc.push_back(Process("p3", 2, 4));
    proc.push_back(Process("p4", 6, 0));
    proc.push_back(Process("p5", 3, 2));

    sort(proc.begin(), proc.end(), compareByArrival);
    int currentTime = 0;
    int completeProcesses = 0;

    cout << "SRTF Scheduling:" << endl;
    cout << "PID\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time" << endl;

    while (completeProcesses < n) {
        int shortestRemainingTime = INT_MAX;
        int selectedProcess = -1;

        for (int i = 0; i < n; ++i) {
            if (proc[i].arrivalTime <= currentTime && proc[i].remainingTime > 0 && proc[i].remainingTime < shortestRemainingTime) {
                shortestRemainingTime = proc[i].remainingTime;
                selectedProcess = i;
            }
        }

        if (selectedProcess == -1) {
            currentTime++;
            continue;
        }

        proc[selectedProcess].remainingTime--;

        if (proc[selectedProcess].remainingTime == 0) {
            proc[selectedProcess].completionTime = currentTime + 1;
            proc[selectedProcess].turnaroundTime = proc[selectedProcess].completionTime - proc[selectedProcess].arrivalTime;
            proc[selectedProcess].waitingTime = proc[selectedProcess].turnaroundTime - proc[selectedProcess].burstTime;
            completeProcesses++;
        }
        currentTime++;
    }

    for (int i = 0; i < n; i++) {
        cout << proc[i].pid << "\t" << proc[i].arrivalTime << "\t\t" << proc[i].burstTime << "\t\t" << proc[i].completionTime << "\t\t" << proc[i].turnaroundTime << "\t\t" << proc[i].waitingTime << endl;
    }

    return 0;
}
